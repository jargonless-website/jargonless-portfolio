name: CD Prod

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: "Type EXACTLY: deploy-prod"
        required: true
        type: string

jobs:
  deploy-prod:
    if: inputs.confirm == 'deploy-prod' && github.event_name != 'pull_request'
    runs-on: self-hosted
    environment: production
    env:
      WORKSPACE_ROOT: /work/.deploy/prod
      APP_ENV_FILE: /work/infra/compose/.env.production
      APP_ENV_FILE_HOST: /volume1/docker/portfolio/infra/compose/.env.production
      TUNNEL_ENV_FILE: /work/infra/compose/.env.tunnel
      TUNNEL_ENV_FILE_HOST: /volume1/docker/portfolio/infra/compose/.env.tunnel
      TUNNEL_VOLUME_LOCAL: /work/cloudflared
      TUNNEL_VOLUME_HOST: /volume1/docker/portfolio/cloudflared
      NGINX_CONFIG_PATH: /work/infra/nginx/nginx.conf
      NGINX_CONFIG_PATH_HOST: /volume1/docker/portfolio/infra/nginx/nginx.conf
      NGINX_SNIPPETS_PATH: /work/infra/nginx/snippets
      NGINX_SNIPPETS_PATH_HOST: /volume1/docker/portfolio/infra/nginx/snippets

    # Run every shell step from the repo mount inside the runner container
    defaults:
      run:
        working-directory: /work

    steps:
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USER }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Mark NAS repo mount as safe
        run: git config --global --add safe.directory /work

      - name: Prepare clean workspace snapshot
        run: |
          set -e
          if [ ! -d .git ]; then
            git clone https://github.com/jargonless-website/jargonless-portfolio .
          fi
          git fetch --prune origin
          rm -rf "${WORKSPACE_ROOT}"
          mkdir -p "${WORKSPACE_ROOT}"
          git archive origin/main | tar -x -C "${WORKSPACE_ROOT}"
          for secret in \
            infra/compose/.env.production \
            infra/compose/.env.tunnel \
            infra/compose/.env.runner
          do
            if [ -f "/work/${secret}" ]; then
              echo "::notice::Syncing /work/${secret} into workspace."
              mkdir -p "${WORKSPACE_ROOT}/$(dirname "${secret}")"
              cp "/work/${secret}" "${WORKSPACE_ROOT}/${secret}"
            else
              echo "::notice::No local copy at /work/${secret}; relying on secrets if provided."
            fi
          done

      - name: Verify production env files on NAS
        run: |
          set -euo pipefail
          echo "::notice::Using production env file ${APP_ENV_FILE} (host ${APP_ENV_FILE_HOST})"
          echo "::notice::Using production tunnel env file ${TUNNEL_ENV_FILE} (host ${TUNNEL_ENV_FILE_HOST})"
          for file in "${APP_ENV_FILE}" "${TUNNEL_ENV_FILE}"; do
            if [ ! -f "$file" ]; then
              echo "::error file=$file::Expected production env file '$file' on NAS. Create it or supply secrets."
              exit 1
            fi
          done
          token_line="$(grep -E '^CLOUDFLARE_TUNNEL_TOKEN=' "${TUNNEL_ENV_FILE}" || true)"
          if [ -z "$token_line" ] || [ -z "${token_line#CLOUDFLARE_TUNNEL_TOKEN=}" ]; then
            echo "::error file=${TUNNEL_ENV_FILE}::CLOUDFLARE_TUNNEL_TOKEN missing or empty. Update the NAS file."
            exit 1
          fi

      - name: Verify production nginx config on NAS
        run: |
          set -euo pipefail
          if [ ! -f "${NGINX_CONFIG_PATH}" ]; then
            echo "::error file=${NGINX_CONFIG_PATH}::Missing production nginx configuration file on NAS."
            exit 1
          fi
          if [ ! -d "${NGINX_SNIPPETS_PATH}" ]; then
            echo "::warning ::Nginx snippets directory '${NGINX_SNIPPETS_PATH}' not found; creating empty directory."
            mkdir -p "${NGINX_SNIPPETS_PATH}"
          fi

      - name: Ensure Cloudflared volume directory exists
        run: |
          set -euo pipefail
          echo "::notice::Ensuring Cloudflared volume path ${TUNNEL_VOLUME_LOCAL} (host ${TUNNEL_VOLUME_HOST}) exists"
          mkdir -p "${TUNNEL_VOLUME_LOCAL}"

      - name: Pull images (latest)
        run: |
          docker pull ghcr.io/jargonless-website/portfolio-web:latest
          docker pull ghcr.io/jargonless-website/portfolio-api:latest

      - name: Deploy stack (prod)
        working-directory: ${{ env.WORKSPACE_ROOT }}
        env:
          COMPOSE_PROJECT_NAME: portfolio
          NGINX_CONFIG_PATH: ${{ env.NGINX_CONFIG_PATH_HOST }}
          NGINX_SNIPPETS_PATH: ${{ env.NGINX_SNIPPETS_PATH_HOST }}
          APP_ENV_FILE: ${{ env.APP_ENV_FILE }}
          APP_ENV_FILE_HOST: ${{ env.APP_ENV_FILE_HOST }}
          TUNNEL_ENV_FILE: ${{ env.TUNNEL_ENV_FILE }}
          TUNNEL_ENV_FILE_HOST: ${{ env.TUNNEL_ENV_FILE_HOST }}
          TUNNEL_VOLUME: ${{ env.TUNNEL_VOLUME_HOST }}
        run: |
          set -euo pipefail
          echo "Using host paths:"
          echo "  APP_ENV_FILE(host): ${APP_ENV_FILE_HOST:-${APP_ENV_FILE}}"
          echo "  TUNNEL_ENV_FILE(host): ${TUNNEL_ENV_FILE_HOST:-${TUNNEL_ENV_FILE}}"
          echo "  NGINX_CONFIG_PATH(host): ${NGINX_CONFIG_PATH}"
          echo "  NGINX_SNIPPETS_PATH(host): ${NGINX_SNIPPETS_PATH}"
          echo "  TUNNEL_VOLUME(host): ${TUNNEL_VOLUME}"
          docker compose \
            -f infra/compose/docker-compose.yml \
            -f infra/compose/docker-compose.prod.yml \
            --env-file "${APP_ENV_FILE}" \
            up -d --remove-orphans nginx api jl_tunnel

      - name: Show container status
        run: docker ps --format 'table {{.Names}}\t{{.Status}}' | grep -E 'portfolio-(nginx|api|jl_tunnel)-1' || true
