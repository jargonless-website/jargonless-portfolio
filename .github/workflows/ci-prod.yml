name: CD Prod

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: "Type EXACTLY: deploy-prod"
        required: true
        type: string

jobs:
  deploy-prod:
    if: inputs.confirm == 'deploy-prod' && github.event_name != 'pull_request'
    runs-on: self-hosted
    environment: production
    env:
      WORKSPACE_ROOT: /work/.deploy/prod
      PROD_ENV_FILE_CONTENT: ${{ secrets.PROD_ENV_FILE }}
      PROD_TUNNEL_TOKEN: ${{ secrets.PROD_TUNNEL_TOKEN }}
      TUNNEL_VOLUME: /volume1/docker/portfolio/cloudflared

    # Run every shell step from the repo mount inside the runner container
    defaults:
      run:
        working-directory: /work

    steps:
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USER }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Mark NAS repo mount as safe
        run: git config --global --add safe.directory /work

      - name: Prepare clean workspace snapshot
        run: |
          set -e
          if [ ! -d .git ]; then
            git clone https://github.com/jargonless-website/jargonless-portfolio .
          fi
          git fetch --prune origin
          rm -rf "${WORKSPACE_ROOT}"
          mkdir -p "${WORKSPACE_ROOT}"
          git archive origin/main | tar -x -C "${WORKSPACE_ROOT}"
          for secret in \
            infra/compose/.env.production \
            infra/compose/.env.tunnel \
            infra/compose/.env.runner
          do
            if [ -f "/work/${secret}" ]; then
              echo "::notice::Syncing /work/${secret} into workspace."
              mkdir -p "${WORKSPACE_ROOT}/$(dirname "${secret}")"
              cp "/work/${secret}" "${WORKSPACE_ROOT}/${secret}"
            else
              echo "::notice::No local copy at /work/${secret}; relying on secrets if provided."
            fi
          done

      - name: Write production env files from secrets (optional)
        if: env.PROD_ENV_FILE_CONTENT != '' || env.PROD_TUNNEL_TOKEN != ''
        working-directory: ${{ env.WORKSPACE_ROOT }}
        env:
          PROD_ENV_FILE_CONTENT: ${{ env.PROD_ENV_FILE_CONTENT }}
          PROD_TUNNEL_TOKEN: ${{ env.PROD_TUNNEL_TOKEN }}
        run: |
          set -euo pipefail
          mkdir -p infra/compose
          if [ -n "${PROD_ENV_FILE_CONTENT:-}" ]; then
            umask 177
            printf '%s\n' "${PROD_ENV_FILE_CONTENT}" > infra/compose/.env.production
          fi
          if [ -n "${PROD_TUNNEL_TOKEN:-}" ]; then
            umask 177
            printf 'CLOUDFLARE_TUNNEL_TOKEN=%s\n' "${PROD_TUNNEL_TOKEN}" > infra/compose/.env.tunnel
          fi

      - name: Verify production env files
        working-directory: ${{ env.WORKSPACE_ROOT }}
        run: |
          set -euo pipefail
          missing=0
          for file in infra/compose/.env.production infra/compose/.env.tunnel; do
            if [ ! -f "$file" ]; then
              if [ "$file" = "infra/compose/.env.production" ]; then
                echo "::error file=$file::Expected production env file '$file' to exist. Populate it on the NAS under /work/$file or set the GitHub secret PROD_ENV_FILE."
              else
                echo "::error file=$file::Expected production env file '$file' to exist. Populate it on the NAS under /work/$file or set the GitHub secret PROD_TUNNEL_TOKEN."
              fi
              missing=1
            fi
          done
          if [ -f infra/compose/.env.tunnel ]; then
            token_value="$(grep -E '^CLOUDFLARE_TUNNEL_TOKEN=' infra/compose/.env.tunnel | head -n1 | cut -d'=' -f2-)"
            if [ -z "${token_value}" ]; then
              echo "::error file=infra/compose/.env.tunnel::CLOUDFLARE_TUNNEL_TOKEN is empty. Update the file or PROD_TUNNEL_TOKEN secret with a valid token."
              missing=1
            fi
          fi
          if [ "$missing" -ne 0 ]; then
            exit 1
          fi

      - name: Verify production nginx config
        working-directory: ${{ env.WORKSPACE_ROOT }}
        run: |
          set -euo pipefail
          if [ ! -f infra/nginx/nginx.conf ]; then
            echo "::error file=infra/nginx/nginx.conf::Missing production nginx configuration file."
            exit 1
          fi
          mkdir -p infra/nginx/snippets

      - name: Show production nginx workspace files
        working-directory: ${{ env.WORKSPACE_ROOT }}
        run: |
          set -euo pipefail
          ls -R infra/nginx || true

      - name: Ensure Cloudflared volume directory exists
        env:
          TUNNEL_VOLUME: ${{ env.TUNNEL_VOLUME || '/volume1/docker/portfolio/cloudflared' }}
        run: |
          set -euo pipefail
          mkdir -p "${TUNNEL_VOLUME}"

      - name: Pull images (latest)
        run: |
          docker pull ghcr.io/jargonless-website/portfolio-web:latest
          docker pull ghcr.io/jargonless-website/portfolio-api:latest

      - name: Deploy stack (prod)
        working-directory: ${{ env.WORKSPACE_ROOT }}
        env:
          COMPOSE_PROJECT_NAME: portfolio
          NGINX_CONFIG_PATH: ${{ env.WORKSPACE_ROOT }}/infra/nginx/nginx.conf
          NGINX_SNIPPETS_PATH: ${{ env.WORKSPACE_ROOT }}/infra/nginx/snippets
        run: |
          set -euo pipefail
          docker compose \
            -f infra/compose/docker-compose.yml \
            -f infra/compose/docker-compose.prod.yml \
            --env-file infra/compose/.env.production \
            up -d --remove-orphans nginx api jl_tunnel

      - name: Show container status
        run: docker ps --format 'table {{.Names}}\t{{.Status}}' | grep -E 'portfolio-(nginx|api|jl_tunnel)-1' || true
