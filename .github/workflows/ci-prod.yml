name: CD Prod

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      confirm:
        description: "Type EXACTLY: deploy-prod"
        required: true
        type: string

jobs:
  deploy-prod:
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && inputs.confirm == 'deploy-prod')
    runs-on: self-hosted
    environment: production

    env:
      REGISTRY: ghcr.io
      IMAGE_WEB: ghcr.io/jargonless-website/portfolio-web
      IMAGE_API: ghcr.io/jargonless-website/portfolio-api
      STACK_NAME: portfolio
      COMPOSE_PROJECT_NAME: portfolio
      WORKSPACE_ROOT: /volume1/docker/portfolio/.deploy/prod
      HOST_PROJECT_ROOT: /volume1/docker/portfolio
      HOST_ENV_FILE: /work/infra/compose/.env.production
      HOST_TUNNEL_FILE: /work/infra/compose/.env.tunnel
      HOST_NGINX_CONFIG: /work/infra/nginx/nginx.conf
      HOST_NGINX_SNIPPETS: /work/infra/nginx/snippets
      HOST_TUNNEL_VOLUME: /volume1/docker/portfolio/cloudflared

    steps:
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.GHCR_USER }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Prepare production workspace
        run: |
          set -euo pipefail
          mkdir -p "${WORKSPACE_ROOT}"
          if [ -d "${WORKSPACE_ROOT}/.git" ]; then
            echo "Repo exists â†’ refresh main branch"
            git -C "${WORKSPACE_ROOT}" fetch --all --prune
            git -C "${WORKSPACE_ROOT}" checkout main || git -C "${WORKSPACE_ROOT}" checkout -b main
            git -C "${WORKSPACE_ROOT}" reset --hard origin/main
            git -C "${WORKSPACE_ROOT}" clean -fdx
          else
            echo "Fresh clone of main branch into ${WORKSPACE_ROOT}"
            rm -rf "${WORKSPACE_ROOT:?}/"*
            git clone --branch main https://github.com/jargonless-website/jargonless-portfolio "${WORKSPACE_ROOT}"
          fi

      - name: Copy production configuration
        run: |
          set -euo pipefail
          [ -s "${HOST_ENV_FILE}" ] || { echo "::error::Missing ${HOST_ENV_FILE}"; exit 1; }
          [ -s "${HOST_TUNNEL_FILE}" ] || { echo "::error::Missing ${HOST_TUNNEL_FILE}"; exit 1; }
          [ -f "${HOST_NGINX_CONFIG}" ] || { echo "::error::Missing ${HOST_NGINX_CONFIG}"; exit 1; }
          mkdir -p "${WORKSPACE_ROOT}/infra/compose"
          cp "${HOST_ENV_FILE}" "${WORKSPACE_ROOT}/infra/compose/.env.production"
          cp "${HOST_TUNNEL_FILE}" "${WORKSPACE_ROOT}/infra/compose/.env.tunnel"
          mkdir -p "${WORKSPACE_ROOT}/infra/nginx"
          cp "${HOST_NGINX_CONFIG}" "${WORKSPACE_ROOT}/infra/nginx/nginx.conf"
          if [ -d "${HOST_NGINX_SNIPPETS}" ]; then
            mkdir -p "${WORKSPACE_ROOT}/infra/nginx/snippets"
            rsync -a "${HOST_NGINX_SNIPPETS}/" "${WORKSPACE_ROOT}/infra/nginx/snippets/"
          else
            mkdir -p "${WORKSPACE_ROOT}/infra/nginx/snippets"
          fi
          mkdir -p "${HOST_TUNNEL_VOLUME}"

      - name: Inspect workspace
        run: |
          set -euo pipefail
          echo "Workspace compose dir"
          ls -al "${WORKSPACE_ROOT}/infra/compose" || true
          echo "Workspace nginx dir"
          ls -al "${WORKSPACE_ROOT}/infra/nginx" || true
          echo "Cloudflared volume dir"
          ls -al "${HOST_TUNNEL_VOLUME}" || true

      - name: Pull images (latest)
        run: |
          docker pull ${IMAGE_WEB}:latest
          docker pull ${IMAGE_API}:latest

      - name: Deploy stack (production)
        working-directory: ${{ env.WORKSPACE_ROOT }}
        env:
          COMPOSE_PROJECT_NAME: ${{ env.COMPOSE_PROJECT_NAME }}
          STACK_NAME: ${{ env.STACK_NAME }}
          APP_ENV_FILE: ${{ env.WORKSPACE_ROOT }}/infra/compose/.env.production
          TUNNEL_ENV_FILE: ${{ env.WORKSPACE_ROOT }}/infra/compose/.env.tunnel
          TUNNEL_VOLUME: ${{ env.HOST_TUNNEL_VOLUME }}
        run: |
          set -euo pipefail
          [ -s "${APP_ENV_FILE}" ] || { echo "::error::Missing ${APP_ENV_FILE}"; exit 1; }
          [ -s "${TUNNEL_ENV_FILE}" ] || { echo "::error::Missing ${TUNNEL_ENV_FILE}"; exit 1; }
          token_value="$(sed -n 's/^CLOUDFLARE_TUNNEL_TOKEN=//p' "${TUNNEL_ENV_FILE}")"
          [ -n "${token_value}" ] || { echo "::error::CLOUDFLARE_TUNNEL_TOKEN empty"; exit 1; }
          export CLOUDFLARE_TUNNEL_TOKEN="${token_value}"
          docker compose \
            -f infra/compose/docker-compose.yml \
            -f infra/compose/docker-compose.prod.yml \
            --env-file "${APP_ENV_FILE}" \
            up -d --remove-orphans nginx api jl_tunnel

      - name: Show container status
        run: docker ps --format 'table {{.Names}}\t{{.Status}}' | grep -E 'portfolio-(nginx|api|jl_tunnel)-1' || true