name: CD Staging

on:
  push:
    branches: [staging]

env:
  REGISTRY: ghcr.io
  IMAGE_WEB: ghcr.io/jargonless-website/portfolio-web
  IMAGE_API: ghcr.io/jargonless-website/portfolio-api
  STACK_NAME: portfolio-stg
  COMPOSE_PROJECT_NAME: portfolio-stg
  APP_ENV_FILE: ./.env.production.stg
  TUNNEL_ENV_FILE: ./.env.tunnel.stg
  TUNNEL_VOLUME: /volume1/docker/portfolio/cloudflared-staging
  WEB_IMAGE_TAG: staging
  API_IMAGE_TAG: staging
  WORKSPACE_ROOT: /work/.deploy/staging
  STAGING_ENV_FILE_CONTENT: ${{ secrets.STAGING_ENV_FILE }}
  STAGING_TUNNEL_TOKEN: ${{ secrets.STAGING_TUNNEL_TOKEN }}

concurrency:
  group: cd-staging-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy-staging:
    runs-on: self-hosted
    environment: staging

    steps:
      - name: Mark NAS repo mount as safe
        run: git config --global --add safe.directory /work

      - name: Prepare clean workspace snapshot
        working-directory: /work
        run: |
          set -euo pipefail
          if [ ! -d .git ]; then
            git clone https://github.com/jargonless-website/jargonless-portfolio .
          fi
          git fetch --prune origin
          rm -rf "${WORKSPACE_ROOT}"
          mkdir -p "${WORKSPACE_ROOT}"
          git archive origin/staging | tar -x -C "${WORKSPACE_ROOT}"
          for secret in \
            infra/compose/.env.production.stg \
            infra/compose/.env.tunnel.stg \
            infra/compose/.env.production \
            infra/compose/.env.tunnel \
            infra/compose/.env.runner
          do
            if [ -f "/work/${secret}" ]; then
              echo "::notice::Syncing /work/${secret} into workspace."
              mkdir -p "${WORKSPACE_ROOT}/$(dirname "${secret}")"
              cp "/work/${secret}" "${WORKSPACE_ROOT}/${secret}"
            else
              echo "::notice::No local copy at /work/${secret}; relying on secrets if provided."
            fi
          done

      - name: Write staging env files from secrets (optional)
        if: env.STAGING_ENV_FILE_CONTENT != '' || env.STAGING_TUNNEL_TOKEN != ''
        working-directory: ${{ env.WORKSPACE_ROOT }}
        env:
          STAGING_ENV_FILE_CONTENT: ${{ env.STAGING_ENV_FILE_CONTENT }}
          STAGING_TUNNEL_TOKEN: ${{ env.STAGING_TUNNEL_TOKEN }}
        run: |
          set -euo pipefail
          mkdir -p infra/compose
          if [ -n "${STAGING_ENV_FILE_CONTENT:-}" ]; then
            umask 177
            printf '%s\n' "${STAGING_ENV_FILE_CONTENT}" > infra/compose/.env.production.stg
          fi
          if [ -n "${STAGING_TUNNEL_TOKEN:-}" ]; then
            umask 177
            printf 'CLOUDFLARE_TUNNEL_TOKEN=%s\n' "${STAGING_TUNNEL_TOKEN}" > infra/compose/.env.tunnel.stg
          fi

      - name: Verify staging env files
        working-directory: ${{ env.WORKSPACE_ROOT }}
        run: |
          set -euo pipefail
          missing=0
          for file in infra/compose/.env.production.stg infra/compose/.env.tunnel.stg; do
            if [ ! -f "$file" ]; then
              if [ "$file" = "infra/compose/.env.production.stg" ]; then
                echo "::error file=$file::Expected staging env file '$file' to exist. Populate it on the NAS under /work/$file or set the GitHub secret STAGING_ENV_FILE."
              else
                echo "::error file=$file::Expected staging env file '$file' to exist. Populate it on the NAS under /work/$file or set the GitHub secret STAGING_TUNNEL_TOKEN."
              fi
              missing=1
            fi
          done
          if [ -f infra/compose/.env.tunnel.stg ]; then
            token_value="$(grep -E '^CLOUDFLARE_TUNNEL_TOKEN=' infra/compose/.env.tunnel.stg | head -n1 | cut -d'=' -f2-)"
            if [ -z "${token_value}" ]; then
              echo "::error file=infra/compose/.env.tunnel.stg::CLOUDFLARE_TUNNEL_TOKEN is empty. Update the file or STAGING_TUNNEL_TOKEN secret with a valid token."
              missing=1
            fi
          fi
          if [ "$missing" -ne 0 ]; then
            exit 1
          fi

      - name: Ensure Cloudflared volume directory exists
        run: |
          set -euo pipefail
          mkdir -p "${TUNNEL_VOLUME}"

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.GHCR_USER }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build & push WEB (staging)
        working-directory: ${{ env.WORKSPACE_ROOT }}
        run: |
          set -euo pipefail
          docker build -t ${IMAGE_WEB}:${GITHUB_SHA} ./apps/web
          docker tag ${IMAGE_WEB}:${GITHUB_SHA} ${IMAGE_WEB}:${WEB_IMAGE_TAG}
          docker push ${IMAGE_WEB}:${GITHUB_SHA}
          docker push ${IMAGE_WEB}:${WEB_IMAGE_TAG}

      - name: Build & push API (staging)
        working-directory: ${{ env.WORKSPACE_ROOT }}
        run: |
          set -euo pipefail
          docker build -t ${IMAGE_API}:${GITHUB_SHA} ./apps/api
          docker tag ${IMAGE_API}:${GITHUB_SHA} ${IMAGE_API}:${API_IMAGE_TAG}
          docker push ${IMAGE_API}:${GITHUB_SHA}
          docker push ${IMAGE_API}:${API_IMAGE_TAG}

      - name: Deploy stack (staging)
        working-directory: ${{ env.WORKSPACE_ROOT }}
        env:
          COMPOSE_PROJECT_NAME: ${{ env.COMPOSE_PROJECT_NAME }}
          STACK_NAME: ${{ env.STACK_NAME }}
          APP_ENV_FILE: ${{ env.APP_ENV_FILE }}
          TUNNEL_ENV_FILE: ${{ env.TUNNEL_ENV_FILE }}
          TUNNEL_VOLUME: ${{ env.TUNNEL_VOLUME }}
          WEB_IMAGE_TAG: ${{ env.WEB_IMAGE_TAG }}
          API_IMAGE_TAG: ${{ env.API_IMAGE_TAG }}
        run: |
          set -euo pipefail
          docker compose \
            -f infra/compose/docker-compose.yml \
            -f infra/compose/docker-compose.prod.yml \
            --env-file infra/compose/.env.production.stg \
            up -d --remove-orphans nginx api jl_tunnel

      - name: Show container status
        run: |
          docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Image}}' | grep -E 'portfolio-stg-(nginx|api|jl_tunnel)' || true
