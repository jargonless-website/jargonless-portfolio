name: CD Staging

on:
  push:
    branches: [staging]

env:
  REGISTRY: ghcr.io
  IMAGE_WEB: ghcr.io/jargonless-website/portfolio-web
  IMAGE_API: ghcr.io/jargonless-website/portfolio-api
  STACK_NAME: portfolio-stg
  COMPOSE_PROJECT_NAME: portfolio-stg
  APP_ENV_FILE: /work/infra/compose/.env.production.stg
  TUNNEL_ENV_FILE: /work/infra/compose/.env.tunnel.stg
  TUNNEL_VOLUME: /work/cloudflared-staging
  WEB_IMAGE_TAG: staging
  API_IMAGE_TAG: staging
  WORKSPACE_ROOT: /work/.deploy/staging
  NGINX_CONFIG_PATH: /work/infra/nginx/nginx.staging.conf
  NGINX_SNIPPETS_PATH: /work/infra/nginx/snippets

concurrency:
  group: cd-staging-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy-staging:
    runs-on: self-hosted
    environment: staging

    steps:
      - name: Mark NAS repo mount as safe
        run: git config --global --add safe.directory /work

      - name: Prepare clean workspace snapshot
        working-directory: /work
        run: |
          set -euo pipefail
          if [ ! -d .git ]; then
            git clone https://github.com/jargonless-website/jargonless-portfolio .
          fi
          git fetch --prune origin
          rm -rf "${WORKSPACE_ROOT}"
          mkdir -p "${WORKSPACE_ROOT}"
          git archive origin/staging | tar -x -C "${WORKSPACE_ROOT}"
          for secret in \
            infra/compose/.env.production.stg \
            infra/compose/.env.tunnel.stg \
            infra/compose/.env.production \
            infra/compose/.env.tunnel \
            infra/compose/.env.runner
          do
            if [ -f "/work/${secret}" ]; then
              echo "::notice::Syncing /work/${secret} into workspace."
              mkdir -p "${WORKSPACE_ROOT}/$(dirname "${secret}")"
              cp "/work/${secret}" "${WORKSPACE_ROOT}/${secret}"
            else
              echo "::notice::No local copy at /work/${secret}; relying on secrets if provided."
            fi
          done

      - name: Inspect mounted NAS paths
        run: |
          set -euo pipefail
          echo "Contents of /work/infra/compose"
          ls -al /work/infra/compose || true
          echo "Contents of /work/infra/nginx"
          ls -al /work/infra/nginx || true
          echo "Contents of /work/cloudflared-staging"
          ls -al /work/cloudflared-staging || true

      - name: Verify staging env files on NAS
        run: |
          set -euo pipefail
          echo "::notice::Using staging env file ${APP_ENV_FILE}"
          echo "::notice::Using staging tunnel env file ${TUNNEL_ENV_FILE}"
          for file in "${APP_ENV_FILE}" "${TUNNEL_ENV_FILE}"; do
            if [ ! -f "$file" ]; then
              echo "::error file=$file::Expected staging env file '$file' on NAS. Create it or supply secrets."
              exit 1
            fi
          done
          token_line="$(grep -E '^CLOUDFLARE_TUNNEL_TOKEN=' "${TUNNEL_ENV_FILE}" || true)"
          if [ -z "$token_line" ] || [ -z "${token_line#CLOUDFLARE_TUNNEL_TOKEN=}" ]; then
            echo "::error file=${TUNNEL_ENV_FILE}::CLOUDFLARE_TUNNEL_TOKEN missing or empty. Update the NAS file."
            exit 1
          fi

      - name: Verify staging nginx config on NAS
        run: |
          set -euo pipefail
          if [ ! -f "${NGINX_CONFIG_PATH}" ]; then
            echo "::error file=${NGINX_CONFIG_PATH}::Missing staging nginx configuration file on NAS."
            exit 1
          fi
          if [ ! -d "${NGINX_SNIPPETS_PATH}" ]; then
            echo "::warning ::Nginx snippets directory '${NGINX_SNIPPETS_PATH}' not found; creating empty directory."
            mkdir -p "${NGINX_SNIPPETS_PATH}"
          fi

      - name: Ensure Cloudflared volume directory exists
        run: |
          set -euo pipefail
          echo "::notice::Ensuring Cloudflared volume path ${TUNNEL_VOLUME} exists"
          mkdir -p "${TUNNEL_VOLUME}"

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.GHCR_USER }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build & push WEB (staging)
        working-directory: ${{ env.WORKSPACE_ROOT }}
        run: |
          set -euo pipefail
          docker build -t ${IMAGE_WEB}:${GITHUB_SHA} ./apps/web
          docker tag ${IMAGE_WEB}:${GITHUB_SHA} ${IMAGE_WEB}:${WEB_IMAGE_TAG}
          docker push ${IMAGE_WEB}:${GITHUB_SHA}
          docker push ${IMAGE_WEB}:${WEB_IMAGE_TAG}

      - name: Build & push API (staging)
        working-directory: ${{ env.WORKSPACE_ROOT }}
        run: |
          set -euo pipefail
          docker build -t ${IMAGE_API}:${GITHUB_SHA} ./apps/api
          docker tag ${IMAGE_API}:${GITHUB_SHA} ${IMAGE_API}:${API_IMAGE_TAG}
          docker push ${IMAGE_API}:${GITHUB_SHA}
          docker push ${IMAGE_API}:${API_IMAGE_TAG}

      - name: Deploy stack (staging)
        working-directory: ${{ env.WORKSPACE_ROOT }}
        env:
          COMPOSE_PROJECT_NAME: ${{ env.COMPOSE_PROJECT_NAME }}
          STACK_NAME: ${{ env.STACK_NAME }}
          APP_ENV_FILE: ${{ env.APP_ENV_FILE }}
          TUNNEL_ENV_FILE: ${{ env.TUNNEL_ENV_FILE }}
          TUNNEL_VOLUME: ${{ env.TUNNEL_VOLUME }}
          WEB_IMAGE_TAG: ${{ env.WEB_IMAGE_TAG }}
          API_IMAGE_TAG: ${{ env.API_IMAGE_TAG }}
          NGINX_CONFIG_PATH: ${{ env.NGINX_CONFIG_PATH }}
          NGINX_SNIPPETS_PATH: ${{ env.NGINX_SNIPPETS_PATH }}
        run: |
          set -euo pipefail
          echo "Using paths for deployment:"
          echo "  NGINX_CONFIG_PATH: ${NGINX_CONFIG_PATH}"
          echo "  NGINX_SNIPPETS_PATH: ${NGINX_SNIPPETS_PATH}"
          echo "  TUNNEL_VOLUME: ${TUNNEL_VOLUME}"
          token_value="$(grep -E '^CLOUDFLARE_TUNNEL_TOKEN=' \"${TUNNEL_ENV_FILE}\" | head -n1 | cut -d'=' -f2-)"
          if [ -z "${token_value}" ]; then
            echo "::error::Unable to extract CLOUDFLARE_TUNNEL_TOKEN from ${TUNNEL_ENV_FILE}"
            exit 1
          fi
          export CLOUDFLARE_TUNNEL_TOKEN="${token_value}"
          trap 'unset CLOUDFLARE_TUNNEL_TOKEN' EXIT
          docker compose \
            -f infra/compose/docker-compose.yml \
            -f infra/compose/docker-compose.prod.yml \
            --env-file "${APP_ENV_FILE}" \
            up -d --remove-orphans nginx api jl_tunnel

      - name: Show container status
        run: |
          docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Image}}' | grep -E 'portfolio-stg-(nginx|api|jl_tunnel)' || true
